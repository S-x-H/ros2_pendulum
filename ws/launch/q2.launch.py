from launch import LaunchDescription
from launch.actions import DeclareLaunchArgument, OpaqueFunction
from launch.substitutions import LaunchConfiguration
from launch_ros.actions import Node


def launch_setup(context):
    duration = float(LaunchConfiguration("duration").perform(context))
    update_step = int(LaunchConfiguration("update_step").perform(context))
    publish_increment = int(LaunchConfiguration("publish_increment").perform(context))
    log_name = LaunchConfiguration("log_name").perform(context)
    plot_degrees = LaunchConfiguration("plot_degrees").perform(context)
    
    # convert string to bool without case sensitivity
    if plot_degrees.upper() == "TRUE":
        plot_degrees = True
    else:
        plot_degrees = False

    pos_0 = float(LaunchConfiguration("pos_0").perform(context))
    vel_0 = float(LaunchConfiguration("vel_0").perform(context))
    mass = float(LaunchConfiguration("mass").perform(context))
    length = float(LaunchConfiguration("length").perform(context))
    gravity = float(LaunchConfiguration("gravity").perform(context))

    const_torque = LaunchConfiguration("const_torque").perform(context)
    if const_torque == "":
        torque = -999999.0  # garbage
        use_const_torque = False
    else:
        torque = float(const_torque)
        use_const_torque = True

    launch_items = []

    clockNode = Node(
        package="pendulum",
        executable="clock",
        name="clock",
        parameters=[{"update_step": update_step}],
    )
    launch_items.append(clockNode)

    if not use_const_torque:
        torqueNode = Node(
            package="pendulum",
            executable="torque",
            name="torque",
            parameters=[{"update_step": update_step}],
        )
        launch_items.append(torqueNode)

    pendulumNode = Node(
        package="pendulum",
        executable="pendulum",
        name="pendulum",
        parameters=[
            {"duration": duration},
            {"publish_increment": publish_increment},
            {"pos_0": pos_0},
            {"vel_0": vel_0},
            {"use_const_torque": use_const_torque},
            {"torque": torque},
            {"mass": mass},
            {"length": length},
            {"gravity": gravity},
        ],
    )
    launch_items.append(pendulumNode)

    plotterNode = Node(
        package="pendulum",
        executable="plotter",
        name="plotter",
        parameters=[
            {"log_name": log_name},
            {"plot_degrees": plot_degrees},
            {"use_const_torque": use_const_torque},
            {"torque": torque},
        ],
    )
    launch_items.append(plotterNode)

    return launch_items


def generate_launch_description():
    return LaunchDescription(
        [
            DeclareLaunchArgument(
                "duration",
                default_value="8",
                description="Length to run simulation for (s), or leave -1 to continue infinitely until killed.",
            ),
            DeclareLaunchArgument(
                "update_step",
                default_value="1",
                description="Duration (ms) between update steps.",
            ),
            DeclareLaunchArgument(
                "publish_increment",
                default_value="2",
                description="Publication rate as a number of update steps (1 to publish every update).",
            ),
            DeclareLaunchArgument(
                "log_name",
                default_value="q2",
                description="Name of the logfile generated by Plotter.",
            ),
            DeclareLaunchArgument(
                "plot_degrees",
                default_value="true",
                description="True to plot in degrees instead of radians.",
            ),
            DeclareLaunchArgument(
                "pos_0",
                default_value="0",
                description="Initial value of angular position (°).",
            ),
            DeclareLaunchArgument(
                "vel_0",
                default_value="0",
                description="Initial value of angular velocity (°/s).",
            ),
            DeclareLaunchArgument(
                "const_torque",
                default_value="",
                description="Constant torque (Nm), or leave blank to use torque from topic.",
            ),
            DeclareLaunchArgument(
                "mass", default_value="0.5", description="Pendulum mass (kg)."
            ),
            DeclareLaunchArgument(
                "length", default_value="0.2", description="Pendulum length (m)."
            ),
            DeclareLaunchArgument(
                "gravity",
                default_value="9.81",
                description="Acceleration due to gravity (m/s^2).",
            ),

            # node launch logic must be in the new context of a function call for above launch arguments to perform
            OpaqueFunction(function=launch_setup),
        ]
    )
